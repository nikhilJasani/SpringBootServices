import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.swagger:swagger-codegen:2.3.1")
    }
}

apply plugin: 'base'
group = 'com.individual.demonstration'

subprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'java'
    apply plugin: 'maven'
    group = 'com.individual.demonstration'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11
    compileJava.options.fork = true
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

task generateClient {
    doLast {
        def config = new CodegenConfigurator()
        config.setLang("spring")
        config.setApiPackage("com.individual.demonstration.api")            // Package to be used for the API interfaces
        config.setModelPackage("com.individual.demonstration.model")        // Package to be used for the API models
        config.setInputSpec("$projectDir/src/main/resources/Open Data API V2.2.yaml".toString()) // The swagger API file
        config.setOutputDir("$rootDir/src/main/generated".toString())        // The output directory
        config.setAdditionalProperties([
                'dateLibrary'     : 'java11', // Date library to use
                'useTags'         : 'true',  // Use tags for the naming
                'interfaceOnly'   : 'true'   // Generating the Controller API interface and the models only
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate() // Executing the generation
    }
}
